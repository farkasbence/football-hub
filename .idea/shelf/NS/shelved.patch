Index: app/src/main/java/com/bence/kotlinapp/ui/fixturelist/FixtureListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bence.kotlinapp.ui.fixturelist\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.view.*\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.bence.kotlinapp.R\nimport com.bence.kotlinapp.dto.Fixture\nimport com.bence.kotlinapp.dto.FixtureList\nimport com.bence.kotlinapp.utils.LeagueEnum\nimport kotlinx.android.synthetic.main.fragment_fixture_list.*\nimport org.json.JSONException\nimport java.util.*\n\nclass FixtureListFragment : Fragment(), FixtureListPresenter.View {\n\n    private var fixtures: ArrayList<Fixture> = ArrayList()\n    private var selectedMatchDay = \"1\"\n    private lateinit var presenter: FixtureListPresenter\n    private lateinit var listener: OnLeagueSelected\n    private lateinit var selectedLeague: LeagueEnum\n\n    companion object {\n        private const val ARG_SELECTED_LEAGUE = \"ARG_SELECTED_LEAGUE\"\n\n        @JvmStatic\n        fun newInstance(selectedLeague: LeagueEnum) =\n            FixtureListFragment().apply {\n                arguments = Bundle().apply {\n                    putSerializable(ARG_SELECTED_LEAGUE, selectedLeague)\n                }\n            }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        presenter = FixtureListPresenter()\n        arguments?.let {\n            selectedLeague = (it.getSerializable(ARG_SELECTED_LEAGUE) as LeagueEnum?)!!\n        }\n        setHasOptionsMenu(true)\n    }\n\n    override fun onCreateView(inflater: LayoutInflater,\n                              container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_fixture_list, container, false)\n    }\n\n    override fun onAttach(context: Context?) {\n        super.onAttach(context)\n        if (context is OnLeagueSelected) {\n            listener = context\n        } else {\n            throw ClassCastException(context.toString() + \" must implement OnLeagueSelected.\")\n        }\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        presenter.attach(this)\n\n        (activity as AppCompatActivity).supportActionBar!!.setDisplayHomeAsUpEnabled(true)\n        (activity as AppCompatActivity).supportActionBar!!.setDisplayShowHomeEnabled(true)\n        (activity as AppCompatActivity).supportActionBar!!.title = getString(R.string.fixtures_header)\n\n        if (fixtures.isEmpty()) {\n            fetchFixtureList(selectedLeague, selectedMatchDay)\n        } else {\n            initRecyclerView()\n        }\n\n        league_title.text = selectedLeague.nameString\n        league_title.setOnClickListener { listener.onLeagueSelected(selectedLeague)}\n    }\n\n    override fun onCreateOptionsMenu(menu: Menu?, inflater: MenuInflater?) {\n        inflater?.inflate(R.menu.calendar_menu, menu)\n\n        val menuItem = menu?.findItem(R.id.action_calendar)\n        val subMenu = menuItem?.subMenu\n        val matchDays = resources.getStringArray(R.array.match_day_array)\n        for (matchDay: String in matchDays) {\n            subMenu?.add(1, 0, 0, matchDay)\n        }\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n        val matchDay = item?.title\n        val groupId = item?.groupId\n        if (groupId == 1) {\n            if (matchDay != selectedMatchDay) {\n                fetchFixtureList(selectedLeague, matchDay as String)\n            }\n            selectedMatchDay = matchDay as String\n            return true\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    override fun showFixtureList(fixtureList: FixtureList) {\n        activity?.runOnUiThread {\n            try {\n                this@FixtureListFragment.fetchComplete(fixtureList)\n            } catch (e: JSONException) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    override fun showError() {\n        activity?.runOnUiThread{\n            try {\n                Toast.makeText(context, \"Failed to fetch fixture data\", Toast.LENGTH_LONG).show()\n            } catch (e: JSONException) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    private fun fetchComplete(fixtureList: FixtureList) {\n        fixtures.clear()\n\n        for (fixture in fixtureList.fixtures) {\n            fixtures.add(fixture)\n        }\n        initRecyclerView()\n    }\n\n    private fun initRecyclerView() {\n        fixtures_recycler_view.layoutManager = LinearLayoutManager(context)\n        fixtures_recycler_view.adapter = context?.let {\n            FixtureRecyclerAdapter(fixtures, it)\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        presenter.detachView()\n    }\n\n    private fun fetchFixtureList(selectedLeague: LeagueEnum, selectedMatchDay: String) {\n        presenter.fetchFixtureList(selectedLeague, selectedMatchDay)\n    }\n\n    interface OnLeagueSelected {\n        fun onLeagueSelected(selectedLeague: LeagueEnum)\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bence/kotlinapp/ui/fixturelist/FixtureListFragment.kt	(revision b26b1e8fc42bc94f2fcedfabddb2c159eafbc1f6)
+++ app/src/main/java/com/bence/kotlinapp/ui/fixturelist/FixtureListFragment.kt	(date 1585335503000)
@@ -39,7 +39,7 @@
         super.onCreate(savedInstanceState)
         presenter = FixtureListPresenter()
         arguments?.let {
-            selectedLeague = (it.getSerializable(ARG_SELECTED_LEAGUE) as LeagueEnum?)!!
+            selectedLeague = (it.getSerializable(ARG_SELECTED_LEAGUE) as LeagueEnum)
         }
         setHasOptionsMenu(true)
     }
Index: app/src/main/java/com/bence/kotlinapp/ui/leaguetable/LeagueTablePresenter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bence.kotlinapp.ui.leaguetable\n\nimport com.bence.kotlinapp.dto.Standings\nimport com.bence.kotlinapp.network.ApiClient\nimport com.bence.kotlinapp.ui.base.BasePresenter\nimport com.bence.kotlinapp.ui.base.BaseView\nimport com.bence.kotlinapp.utils.LeagueEnum\nimport com.squareup.moshi.JsonAdapter\nimport com.squareup.moshi.Moshi\nimport com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory\nimport okhttp3.Call\nimport okhttp3.Callback\nimport okhttp3.Response\nimport java.io.IOException\n\nclass LeagueTablePresenter(apiClient: ApiClient) : BasePresenter<LeagueTablePresenter.View>() {\n\n    private val mApiClient = apiClient\n\n    fun fetchLeagueTable(selectedLeague: LeagueEnum) {\n\n        mApiClient.getLeagueTable(object: Callback {\n            override fun onFailure(call: Call, e: IOException) {\n                view?.showError()\n            }\n\n            override fun onResponse(call: Call, response: Response) {\n                val responseData = response.body?.string()\n\n                val standings = parseStandings(responseData)\n\n                if (standings != null) {\n                    view?.showLeagueTable(standings)\n                }\n            }\n        }, selectedLeague.apiAbbreviation)\n    }\n\n    interface View : BaseView {\n        fun showLeagueTable(standings: Standings)\n    }\n\n    private fun parseStandings(standingResponse: String?) : Standings? {\n        val moshiInstance: Moshi = Moshi.Builder()\n            .add(KotlinJsonAdapterFactory())\n            .build()\n        val adapter: JsonAdapter<Standings> = moshiInstance.adapter(Standings::class.java)\n        return adapter.fromJson(standingResponse!!)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bence/kotlinapp/ui/leaguetable/LeagueTablePresenter.kt	(revision b26b1e8fc42bc94f2fcedfabddb2c159eafbc1f6)
+++ app/src/main/java/com/bence/kotlinapp/ui/leaguetable/LeagueTablePresenter.kt	(date 1585336102000)
@@ -1,5 +1,6 @@
 package com.bence.kotlinapp.ui.leaguetable
 
+import androidx.annotation.Nullable
 import com.bence.kotlinapp.dto.Standings
 import com.bence.kotlinapp.network.ApiClient
 import com.bence.kotlinapp.ui.base.BasePresenter
@@ -45,6 +46,6 @@
             .add(KotlinJsonAdapterFactory())
             .build()
         val adapter: JsonAdapter<Standings> = moshiInstance.adapter(Standings::class.java)
-        return adapter.fromJson(standingResponse!!)
+        return if (standingResponse != null) adapter.fromJson(standingResponse) else null
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/bence/kotlinapp/ui/leaguetable/LeagueTableFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bence.kotlinapp.ui.leaguetable\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.bence.kotlinapp.R\nimport com.bence.kotlinapp.dto.RankedTeam\nimport com.bence.kotlinapp.dto.Standings\nimport com.bence.kotlinapp.network.ApiClient\nimport com.bence.kotlinapp.utils.LeagueEnum\nimport kotlinx.android.synthetic.main.fragment_league_table.*\nimport org.json.JSONException\n\nclass LeagueTableFragment : Fragment(), LeagueTablePresenter.View {\n\n    private var teams: ArrayList<RankedTeam> = ArrayList()\n    private lateinit var selectedLeague: LeagueEnum\n    private lateinit var presenter: LeagueTablePresenter\n\n    companion object {\n        private const val ARG_SELECTED_LEAGUE = \"ARG_SELECTED_LEAGUE\"\n\n        @JvmStatic\n        fun newInstance(selectedLeague: LeagueEnum) =\n            LeagueTableFragment().apply {\n                arguments = Bundle().apply {\n                    putSerializable(ARG_SELECTED_LEAGUE, selectedLeague)\n                }\n            }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        presenter = LeagueTablePresenter(ApiClient())\n        arguments?.let {\n            selectedLeague = (it.getSerializable(ARG_SELECTED_LEAGUE) as LeagueEnum?)!!\n        }\n    }\n\n    override fun onCreateView(inflater: LayoutInflater,\n                              container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_league_table, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        presenter.attach(this)\n\n        (activity as AppCompatActivity).supportActionBar!!.setDisplayHomeAsUpEnabled(true)\n        (activity as AppCompatActivity).supportActionBar!!.setDisplayShowHomeEnabled(true)\n        (activity as AppCompatActivity).supportActionBar!!.title = selectedLeague.nameString\n\n        fetchLeagueTable(selectedLeague)\n    }\n\n    override fun showLeagueTable(standings: Standings) {\n        activity?.runOnUiThread{\n            try {\n                this@LeagueTableFragment.fetchComplete(standings)\n\n            } catch (e: JSONException) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    override fun showError() {\n        activity?.runOnUiThread{\n            try {\n                Toast.makeText(context, \"Failed to fetch league data\", Toast.LENGTH_LONG).show()\n\n            } catch (e: JSONException) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    private fun fetchComplete(standings: Standings?) {\n        teams.clear()\n        if (standings != null) {\n            val table = standings.tableList[0]\n            val teamList = table.rankedTeamList\n            for (team in teamList) {\n                teams.add(team)\n            }\n        }\n\n        league_recycler_view.layoutManager = LinearLayoutManager(context)\n        league_recycler_view.adapter = context?.let {\n            LeagueRecyclerAdapter(\n                teams,\n                it\n            )\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        presenter.detachView()\n    }\n\n    private fun fetchLeagueTable(selectedLeague: LeagueEnum) {\n        presenter.fetchLeagueTable(selectedLeague)\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bence/kotlinapp/ui/leaguetable/LeagueTableFragment.kt	(revision b26b1e8fc42bc94f2fcedfabddb2c159eafbc1f6)
+++ app/src/main/java/com/bence/kotlinapp/ui/leaguetable/LeagueTableFragment.kt	(date 1585335503000)
@@ -38,7 +38,7 @@
         super.onCreate(savedInstanceState)
         presenter = LeagueTablePresenter(ApiClient())
         arguments?.let {
-            selectedLeague = (it.getSerializable(ARG_SELECTED_LEAGUE) as LeagueEnum?)!!
+            selectedLeague = (it.getSerializable(ARG_SELECTED_LEAGUE) as LeagueEnum)
         }
     }
 
